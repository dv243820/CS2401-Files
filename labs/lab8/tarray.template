/**
 *        @file: tarray.template
 *      @author: Drew VanAtta
 *        @date: October 20, 2022
 *       @brief: Add Description
 */

#include <algorithm>
using namespace std;

template <class T>
Tarray<T>::Tarray()
{
    data = new T[5];
    capacity = 5;
    used = 0;
    current_index = 0;
}

template <class T>
void Tarray<T>::add(T item)
{
    if (used == capacity)
    {
        resize();
    }
    data[used] = item;
    used++;
}

template <class T>
void Tarray<T>::resize()
{
    T *tmp;
    tmp = new T[5 + capacity];
    for (size_t i = 0; i < used; i++)
    {
        tmp[i] = data[i];
    }
    copy(data, data + used, tmp);
    delete[] data;
    data = tmp;
    capacity += 5;
}

template <class T>
void Tarray<T>::start()
{
    current_index = 0;
}

template <class T>
bool Tarray<T>::is_item() const
{
    return (current_index < used);
}

template <class T>
void Tarray<T>::advance()
{
    current_index++;
}

template <class T>
T Tarray<T>::current() const
{
    return (data[current_index]);
}

template <class T>
void Tarray<T>::remove_current()
{
    for (size_t i = current_index; i < used; i++)
    {
        data[i] = data[i + 1]; // copies all from the right over
    }
    used--;
}
